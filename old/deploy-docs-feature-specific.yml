name: Deploy Specific Feature Documentation

on:
  push:
    branches:
      - 'feature/*'
      - 'feat/*'
      - 'enhancement/*'
      - 'improvement/*'
    paths: ['docs/**']

jobs:
  deploy-specific-feature:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Honkit
        run: npm install -g honkit
        
      - name: Build documentation
        run: |
          cd docs
          honkit build . ../_book
          cp redirect.html ../_book/redirect.html
          
      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--target=preview'
          
      - name: Create specific feature summary
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'preview'
            });
            
            if (deployments.length > 0) {
              const latestDeployment = deployments[0];
              
              console.log(`üöÄ Documentation deployed for specific feature branch ${branch}`);
              console.log(`üåê Preview URL: ${latestDeployment.environment_url}`);
              
              // Create a comment on the commit if it's a PR
              try {
                const { data: commits } = await github.rest.repos.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.sha
                });
                
                if (commits.length > 0) {
                  const commit = commits[0];
                  console.log(`üìù Commit: ${commit.commit.message}`);
                }
              } catch (error) {
                console.log('Could not fetch commit details');
              }
            }
          
      - name: Notify deployment success
        run: |
          echo "‚úÖ Documentation successfully deployed for specific feature branch ${{ github.ref_name }}!"
          echo "üåø Feature: ${{ github.ref_name }}"
          echo "üåê Preview URL: https://preview-your-docs-site.vercel.app"
          
      - name: Create specific feature notification
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            
            // Create an issue to track the specific feature
            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Specific Feature Documentation: ${branch}`,
                body: `Documentation has been deployed for specific feature branch \`${branch}\`.\n\n**Status:** Deployed to preview\n**Environment:** Preview\n**Branch:** ${branch}\n\nPlease review and merge to develop when ready.`,
                labels: ['feature', 'documentation', 'preview']
              });
            } catch (error) {
              console.log('Could not create specific feature issue');
            }
